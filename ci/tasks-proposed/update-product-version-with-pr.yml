---
platform: linux

inputs:
- name: hub
- name: product
- name: source
- name: jq
- name: stemcell
  optional: true

outputs:
- name: source

params:
  PRODUCT_NAME: ''
  PRODUCT_SLUG: ''
  ENVIRONMENT: ''
  IAAS: ''
  OM_TARGET: ((opsman.url))
  OM_USERNAME: ((opsman.user))
  OM_PASSWORD: ((opsman.password))
  OM_SKIP_SSL_VALIDATION: "true"
  PIVNET_TOKEN: ((pivnet-api-token))
  GIT_PRIVATE_KEY: ((git_private_key))
  GITHUB_TOKEN: ((github-access-token))
  CONFIG_DIR: config

run:
  path: bash
  args:
  - -c
  - |
    set -euxo pipefail
    basedir=$(pwd)

    source source/pipelines/tasks/common.sh

    git config --global user.name "Concourse Bot"
    git config --global user.email platform-mgmt@vmware.com

    commit_msg="Bumped versions for ${PRODUCT_NAME}
    
    "

    version=$(om interpolate -c product/metadata.yaml --path /release/version)
    deployed_version=$(om staged-products -f json | jq -r --arg product "${PRODUCT_NAME}" '.[] | select(.name==$product) | .version')

    cd source
    if [[ $version == $deployed_version ]]; then
      echo "The requested version $version of $PRODUCT_NAME is already deployed"
    else
      ops_file=$(mktemp)
      cat > ${ops_file} <<EOF
    - type: replace
      path: /product-version?
      value: ${version}
    - type: replace
      path: /product-slug?
      value: ${PRODUCT_SLUG}
    - type: remove
      path: /product-version-regex?
    EOF

      newfile=$(om interpolate -c environments/${IAAS}/${ENVIRONMENT}/${CONFIG_DIR}/versions/${PRODUCT_NAME}.yml -o ${ops_file})
      echo "${newfile}" > environments/${IAAS}/${ENVIRONMENT}/${CONFIG_DIR}/versions/${PRODUCT_NAME}.yml

      if [[ "${PRODUCT_SLUG}" != "ops-manager" ]]; then
        pushd scripts
        ./generate-config.sh ${IAAS} ${PRODUCT_NAME}
        set +e
        if ! ./validate-config.sh ${IAAS} ${ENVIRONMENT} ${PRODUCT_NAME}; then
          git add -A
          git commit -m "Uploading broken configuration for ${PRODUCT_NAME}, version ${version}"
          exit 1
        fi
        popd
        set -e
      fi

      git add -A
      commit_msg="$commit_msg
      Bumped ${PRODUCT_NAME} product version to ${version}"
    fi

    stemcell_family=$(jq -r 'select(.Dependencies != null) | .Dependencies[].Release | select(.Product.Slug|startswith("stemcells-")) | .Version // ""' < ../product/metadata.json | cut -d '.' -f1 | sort -u)
    if [[ ! -z "${stemcell_family}" ]]; then
      latest_stemcell_version=$(om interpolate -c ${basedir}/stemcell/metadata.yaml --path /release/version)

      # Changed to check the stemcell version requested first ... this broke when a tile (wavefront) supported both xenial and jammy
      if [[ "${latest_stemcell_version}" =~ "621." ]]; then
        stemcell_slug=$(jq -r '.Dependencies[].Release.Product | select(.Slug|startswith("stemcells-ubuntu-xenial")) | .Slug' < ../product/metadata.json | sort -u)
      else
        stemcell_slug=$(jq -r '.Dependencies[].Release.Product | select(.Slug|startswith("stemcells-ubuntu-jammy")) | .Slug' < ../product/metadata.json | sort -u)
      fi

      if [[ ! -z "${stemcell_slug}" ]]; then

        stemcell_os=$(echo -n $stemcell_slug | cut -d '-' -f2)

        doUpdate=true
        if [[ -f environments/${IAAS}/${ENVIRONMENT}/${CONFIG_DIR}/versions/${PRODUCT_NAME}-stemcell.yml ]]; then
          current_version=$(om interpolate -c environments/${IAAS}/${ENVIRONMENT}/${CONFIG_DIR}/versions/${PRODUCT_NAME}-stemcell.yml --path /product-version?)
          [[ $current_version == $latest_stemcell_version ]] && doUpdate=false
        else
          echo '{}' > environments/${IAAS}/${ENVIRONMENT}/${CONFIG_DIR}/versions/${PRODUCT_NAME}-stemcell.yml
        fi

        if [[ $doUpdate == "true" ]]; then
          ops_file=$(mktemp)
          cat > ${ops_file} <<EOF
        - type: replace
          path: /stemcell-version?
          value: "${latest_stemcell_version}"
        - type: replace
          path: /stemcell-slug?
          value: $stemcell_slug
        - type: remove
          path: /stemcell-version-regex?
    EOF

          newfile=$(om interpolate -c environments/${IAAS}/${ENVIRONMENT}/${CONFIG_DIR}/versions/${PRODUCT_NAME}-stemcell.yml -o ${ops_file})
          echo "${newfile}" > environments/${IAAS}/${ENVIRONMENT}/${CONFIG_DIR}/versions/${PRODUCT_NAME}-stemcell.yml

          git add environments/${IAAS}/${ENVIRONMENT}/${CONFIG_DIR}/versions/${PRODUCT_NAME}-stemcell.yml
          commit_msg="$commit_msg
            Bumped ${PRODUCT_NAME} stemcell version to ${latest_stemcell_version}"
        fi
      else
        echo "Error in retrieving stemcell information"
      fi
    fi
    set +e

    if [[ ! -z $(git status --porcelain | tr -d '\n\r') ]]; then
      # if there are changes to the versions, re-run generate config
      cd ${basedir}/source/scripts
      ./generate-config.sh ${IAAS} ${PRODUCT_NAME} ${ENVIRONMENT}
      git add -A

      set +x
      mkdir -p $HOME/.ssh
      echo "${GIT_PRIVATE_KEY}" > $HOME/.ssh/id_rsa
      chmod 400 $HOME/.ssh/id_rsa
      set -x

      git config core.sshCommand "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

      branch=${PRODUCT_NAME}-updates-$(date +"%s")
      git commit -m "${commit_msg}"
      git checkout -b ${branch}
      git push origin ${branch}

      tar xf ${basedir}/hub/*.tgz -C ${basedir}
      hub=$(realpath ${basedir}/hub-*/bin/hub)

      # find and delete existing PRs
      for pr in $(${hub} issue -l "${PRODUCT_NAME},version-upgrade" --include-pulls --color=never -f '%I%n'); do
        for oldbranch in $(${hub} pr show ${pr} -f '%H'); do
          git push origin -d ${oldbranch}
        done
      done

      ${hub} pull-request -b main -h ${branch} -l "${PRODUCT_NAME},version-upgrade" --no-edit # uses GITHUB_TOKEN for authentication
    fi
