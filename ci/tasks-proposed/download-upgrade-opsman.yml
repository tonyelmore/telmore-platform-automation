---
platform: linux

inputs:
- name: state # contains the state for the vm
- name: config # contains the product configuration file
- name: download-config #contains the download configuration file
- name: env
- name: installation
- name: vars # variable files to be made available
  optional: true
- name: secrets
  # secret files to be made available
  # separate from vars, so they can be store securely
  optional: true

outputs:
- name: generated-state #contains the updated state file


params:
  VARS_FILES:
  # - Optional
  # - Filepath to the Ops Manager vars yaml file
  # - The path is relative to root of the task build,
  #   so `vars` and `secrets` can be used.
  OPSMAN_CONFIG_FILE: opsman.yml
  # - Optional
  # - Filepath of the opsman config YAML
  # - The path is relative to root of the `config` input
  STATE_FILE: state.yml
  # - Optional
  # - Filepath of the state yaml file
  # - The path is relative to root of the `state` input

  DOWNLOAD_CONFIG_FILE: download-config.yml
  # - Filepath to the download product configuration yaml file
  # - The path is relative to the root of the `config` input

  INSTALLATION_FILE: installation*.zip
  # - Filepath of the installation ZIP file
  # - The filepath provided can be wildcard expanded.
  # - The path is relative to root of the `installation` input

  ENV_FILE: env.yml
  # - Filepath of the env config YAML
  # - Relative to root of the `env` input

run:
  path: bash
  args:
  - "-c"
  - |
    cat /var/version && echo ""
    set -eux

    generated_state_path="generated-state/$(basename "$STATE_FILE")"
    cp "state/$STATE_FILE" "$generated_state_path"

    expected_version=$(bosh int download-config/${DOWNLOAD_CONFIG_FILE} --path /product-version)

    staged_products=$(mktemp)
    om --env env/"${ENV_FILE}" staged-products -f json > ${staged_products}

    set +e
    staged_version=$(bosh int ${staged_products} --path /name=p-bosh/version)
    set -e

    if [[ ${staged_version} == ${expected_version}* ]]; then
      echo "${expected_version} already installed"
      exit 0
    else
      vars_files_args=("")
      for vf in ${VARS_FILES}
      do
        vars_files_args+=("--vars-file ${vf}")
      done

      downloaded_files=$(mktemp -d)
      # shellcheck disable=SC2068
      om download-product \
         --config download-config/"${DOWNLOAD_CONFIG_FILE}" \
         --output-directory ${downloaded_files} \
         ${vars_files_args[@]}

      export IMAGE_FILE
      IMAGE_FILE="$(find ${downloaded_files}/*.{yml,ova,raw} 2>/dev/null | head -n1)"

      if [ -z "$IMAGE_FILE" ]; then
        echo "No image file found in image input."
        echo "Contents of image input:"
        ls -al image
        exit 1
      fi

      # ${vars_files_args[@] needs to be globbed to split properly (SC2068)
      # INSTALLATION_FILE needs to be globbed (SC2086)
      # shellcheck disable=SC2068,SC2086
      om vm-lifecycle upgrade-opsman \
        --config config/"${OPSMAN_CONFIG_FILE}" \
        --env-file env/"${ENV_FILE}" \
        --image-file "${IMAGE_FILE}"  \
        --state-file "$generated_state_path" \
        --installation installation/$INSTALLATION_FILE \
        ${vars_files_args[@]}

      rm -rf ${downloaded_files}
    fi
